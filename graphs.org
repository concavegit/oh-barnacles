#+name: pre
#+BEGIN_SRC python
  from modsim import (System,TimeSeries)
  import matplotlib.pyplot as plt
  import numpy as np
  import pandas as pd
  import seaborn as sns
  import statsmodels.formula.api as sm
  import sympy as sp

  plt.rc('text', usetex=True)
  plt.rc('font', family='serif')
  plt.style.use('ggplot')

  elk = pd.read_csv('data/elk_data_set.csv').set_index('Year')
  wolves = pd.read_csv('data/wolf_data_set.csv').set_index('Year')
  wolves.columns = ['Wolves']
  ew = wolves.join(elk).dropna()
  w = sp.symbols('w')
  rhs = - 3 * (w - 142) ** 2 + 12000

  def kill_wolves(system, t_end):
      system.results = TimeSeries()
      for y in np.arange(system.t0, t_end - 1):
          system.results[y] = - (y - t_end + 20) ** 2 + system.p0 + 26
          if system.results[y] < 0:
              system.results[y] = 0

#+END_SRC

#+RESULTS: pre
: None

#+BEGIN_SRC python :noweb yes :results file :exports both :var fname="graphs/wolves.png"
  <<pre>>
  ax = wolves.plot()
  ax.figure.savefig(fname)
  return fname
#+END_SRC

#+RESULTS:
[[file:graphs/wolves.png]]

#+BEGIN_SRC python :noweb yes :results file :exports both :var fname="graphs/elk.png"
  <<pre>>
  elk = pd.read_csv('data/elk_data_set.csv').set_index('Year')
  ax = elk.plot()
  ax.figure.savefig(fname)
  return fname
#+END_SRC

#+RESULTS:
[[file:graphs/elk.png]]

#+BEGIN_SRC python :noweb yes :results file :exports both :var fname="graphs/wolvesvelk.png"
  <<pre>>
  sns.lmplot('Wolves', 'Elk', ew)
  plt.plot(np.arange(90, 180), [rhs.subs(w, x) for x in np.arange(90, 180)])
  ax = plt.gca()
  ax.set_title('Fit between Elk and Wolves')
  ax.set_xlabel('Wolf Population')
  ax.set_ylabel('Elk Population')
  plt.tight_layout()
  ax.figure.savefig(fname)
  return fname
#+END_SRC

#+RESULTS:
[[file:graphs/wolvesvelk.png]]

#+BEGIN_SRC python :noweb yes :results output :exports both
  <<pre>>
  print(ew)
#+END_SRC

#+RESULTS:
:        Historical Wolf Population      Elk
: Year                                      
: 2001                        132.0  11921.0
: 2003                        174.0   9227.0
: 2011                         98.0   6600.0
: 2015                         98.0   5500.0

#+BEGIN_SRC python :noweb yes :results output :exports both
  <<pre>>
  ew['predElk'] = wolves.apply(lambda row: rhs.subs(w, row['Wolves']), axis=1)
  print(ew)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :noweb yes :results file :exports both :var fname="graphs/wolf-death.png"
  <<pre>>
  wolvesDying = System(p0 = 139, t0 = 1915)

  ax = wolves.plot()
  kill_wolves(wolvesDying, 1930)
  ax = wolvesDying.results.plot(ax = ax)
  ax.set_title('Wolf Population when Hunting is Legal')
  ax.legend(['Wolves', 'Simulation'])
  ax.set_xlim(1915,1923)
  ax.set_ylabel('Population')
  plt.tight_layout()
  ax.figure.savefig(fname)

  return fname
#+END_SRC

#+RESULTS:
[[file:graphs/wolf-death.png]]

#+BEGIN_SRC python :noweb yes :results file :exports both :var fname="graphs/wolf-reintroduce.png"
  <<pre>>
  def reintroduce_wolves(system, t_end):
      growth_rate = 40
      multiplier = 0.1
      period = np.arange(system.t0, t_end, 0.01)
      # values = system.p0 - 25 + 1 / (period - system.t0 + 1) * growth_rate * (3 * np.sin(1.1 * multiplier * np.pi * period) )
      quadCor = (0.1 * (period - system.t0 + 10) ** 2)
      values = system.p0 + growth_rate * 3 * 2 * np.sin(1.1 * multiplier * np.pi * period) / (period - system.t0 + 1) - quadCor + 40
      return pd.DataFrame(values, period)

  wolvesRe = System(p0 = 139, t0 = 1995)
  ax = reintroduce_wolves(wolvesRe, 2025).plot()
  wolves.plot(ax = ax)
  ax.set_xlim(1995,2015)
  ax.set_title('Wolf Population after Reintroduction')
  ax.set_ylabel('Wolf Population')
  ax.legend(['Predicted', 'Actual'])
  ax.figure.savefig(fname)
  return fname
#+END_SRC

#+RESULTS:
[[file:graphs/wolf-reintroduce.png]]

Wolf hunting after 2015:

#+BEGIN_SRC python :noweb yes :results file :exports both :var fname="graphs/wolf-kill.png"
  <<pre>>
  wolvesReHunt = System(p0 = 178, t0 = 2015) # cheated with the p0 to make ends meet
  kill_wolves(wolvesReHunt, 2025)
  wolvesRes = wolvesReHunt.results
  elkRes = [rhs.subs(w, x) for x in wolvesRes]
  for x in range(len(elkRes)):
      if elkRes[x] < 0:
          elkRes[x] = 0
  ax = wolvesRes.plot()
  ax.plot(np.arange(2015,2024), elkRes)
  ax.set_xlabel('Year')
  ax.set_ylabel('Population')
  ax.set_title('Wolves and Elk after Wolf Hunting is Legalized')
  ax.legend(['Wolves', 'Elk'])
  plt.tight_layout()
  ax.figure.savefig(fname)
  return fname
#+END_SRC

#+RESULTS:
[[file:graphs/wolf-kill.png]]
